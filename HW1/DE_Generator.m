%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%                                                                 %%%%%
%%%%%                       Wam Barrett Robot - 4DOF                  %%%%%
%%%%%                                 MODEL                           %%%%%
%%%%%                                                                 %%%%%
%%%%%                       Humberto J De las Casas                   %%%%%
%%%%%                                                                 %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

close all
clear
clc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% HD Parameters:
a(1)=0;a(2)=0;a(3)=0.045;a(4)=-0.045;a(5)=0;
alp(1)=-pi/2;alp(2)=pi/2;alp(3)=-pi/2;alp(4)=pi/2;alp(5)=0;
d(1)=0;d(2)=0;d(3)=0.55;d(4)=0;d(5)=0.376;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Angles in symbolic form:
syms q1 q2 q3 q4 q1dot q2dot q3dot q4dot q1ddot q2ddot q3ddot q4ddot;
qdot=[q1dot;q2dot;q3dot;q4dot];qddot=[q1ddot;q2ddot;q3ddot;q4ddot];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Frames transformation on function of q=[q1 q2 q3]:
Q_10=FK_M(a(1),d(1),q1);Q_10=simplify(Q_10);
Q_20=Q_10*FK_P(a(2),d(2),q2);Q_20=simplify(Q_20);
Q_30=Q_20*FK_M(a(3),d(3),0);Q_30=simplify(Q_30);
Q_40=Q_30*FK_P(a(4),d(4),q4);Q_40=simplify(Q_40);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Z axis in each frame:
Z0=[0;0;1]; Z1=Q_10(1:3,3); Z2=Q_20(1:3,3); Z3=Q_30(1:3,3);
R1=Q_10(1:3,1:3); R2=Q_20(1:3,1:3); R3=Q_30(1:3,1:3); R4=Q_40(1:3,1:3);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%                       Physical Parameters                       %%%%%
%%%%%                                                                 %%%%%
%%%%%   Units: kg, m, kgm2.                                           %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% Link 0:
Link_0_mass=9.97059584;
Link_0_CM=[-0.02017671;-0.26604706;-0.14071720];
Link_0_I=[1.01232865 0.05992441 0.05388736;
          0.05992441 0.38443311 0.37488748;
          0.05388736 0.37488748 0.82739198];
%%%%% Link 1:
Link_1_mass=10.76768767;
Link_1_CM=[-0.00443422;0.12189039;-0.00066489];
Link_1_I=[0.13488033 -0.00213041 -0.00012485;
          -0.00213041 0.11328369 0.00068555;
          -0.00012485 0.00068555 0.09046330]; 
%Link_1_I=[0.29486350 -0.00795023 -0.00009311;
%          -0.00795023 0.11350017 -0.00018711;
%          -0.00009311 -0.00018711 0.25065343];

%%%%% Link 2:
Link_2_mass=3.87493756;
Link_2_CM=[-0.00236983;0.03105614;0.01542114];
Link_2_I=[0.02140958 0.00027172 0.00002461;
          0.00027172 0.01377875 -0.00181920;
          0.00002461 -0.00181920 0.01558906]; 
%Link_2_I=[0.02606840 -0.00001346 -0.00011701;
%          -0.00001346 0.01472202 0.00003659;
%          -0.00011701 0.00003659 0.01934814];

%%%%% Link 3:
Link_3_mass=1.80228141;
Link_3_CM=[-0.03825858;0.20750770;0.00003309];
Link_3_I=[0.05911077 -0.00249612 0.00000738;
          -0.00249612 0.00324550 -0.00001767;
          0.00000738 -0.00001767 0.05927043]; 
%Link_3_I=[0.13671601 -0.01680434 0.00000510;
%          -0.01680434 0.00588354 -0.00000530;
%          0.00000510 -0.00000530 0.13951371];

%%%%% Link 4:
Link_4_mass=2.40016804;
Link_4_CM=[0.00498512;-0.00022942;0.13271662];
Link_4_I=[0.01491672 0.00001741 -0.00150604;
          0.00001741 0.01482922 -0.00002109;
          -0.00150604 -0.00002109 0.00294463];
%Link_4_I=[0.05719268 0.00001467 0.00008193;
%          0.00001467 0.05716470 -0.00009417;
%          0.00008193 -0.00009417 0.00300441];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Cms in Global Coordinates (symbolic form):
CM_1=Q_10*[1 0 0 Link_1_CM(1);0 1 0 Link_1_CM(2);0 0 1 Link_1_CM(3);...
           0 0 0 1];
CM_2=Q_20*[1 0 0 Link_2_CM(1);0 1 0 Link_2_CM(2);0 0 1 Link_2_CM(3);...
           0 0 0 1];
CM_3=Q_30*[1 0 0 Link_3_CM(1);0 1 0 Link_3_CM(2);0 0 1 Link_3_CM(3);...
           0 0 0 1];
CM_4=Q_40*[1 0 0 Link_4_CM(1);0 1 0 Link_4_CM(2);0 0 1 Link_4_CM(3);...
           0 0 0 1];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%                                                                 %%%%%
%%%%%              Jacobian respect to the Center of Mass             %%%%%
%%%%%                                                                 %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% Link 1.
J1=cross(Z0,CM_1(1:3,4));
J1(1:3,2:4)=zeros(3,3);
J1(4:6,:)=[Z0 zeros(3,3)];
%%%%% Link 2.
J2=cross(Z0,CM_2(1:3,4));
J2(1:3,2)=cross(Z1,CM_2(1:3,4)-Q_10(1:3,4));
J2(1:3,3:4)=zeros(3,2);
J2(4:6,:)=[Z0 Z1 zeros(3,2)];
%%%%% Link 3.
J3=cross(Z0,CM_3(1:3,4));
J3(1:3,2)=cross(Z1,CM_3(1:3,4)-Q_10(1:3,4));
J3(1:3,3)=cross(Z2,CM_3(1:3,4)-Q_20(1:3,4));
J3(1:3,4)=zeros(3,1);
J3(4:6,:)=[Z0 Z1 Z2 zeros(3,1)];
%%%%% Link 4.
J4=cross(Z0,CM_4(1:3,4));
J4(1:3,2)=cross(Z1,CM_4(1:3,4)-Q_10(1:3,4));
J4(1:3,3)=cross(Z2,CM_4(1:3,4)-Q_20(1:3,4));
J4(1:3,4)=cross(Z3,CM_4(1:3,4)-Q_30(1:3,4));
J4(4:6,:)=[Z0 Z1 Z2 Z3];
%%%%% Jacobians.
J1=simplify(J1);
J2=simplify(J2);
J3=simplify(J3);
J4=simplify(J4);
      
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Mass Matrix.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
M_q=simplify(...
            J1(4:6,:).'*R1*Link_1_I*R1.'*J1(4:6,:)+...
            J2(4:6,:).'*R2*Link_2_I*R2.'*J2(4:6,:)+...
            J3(4:6,:).'*R3*Link_3_I*R3.'*J3(4:6,:)+...
            J4(4:6,:).'*R4*Link_4_I*R4.'*J4(4:6,:)+...
            Link_1_mass*J1(1:3,:).'*J1(1:3,:)+...
            Link_2_mass*J2(1:3,:).'*J2(1:3,:)+...
            Link_3_mass*J3(1:3,:).'*J3(1:3,:)+...
            Link_4_mass*J4(1:3,:).'*J4(1:3,:));

isequal(M_q,M_q.');                     % It is symmetric!

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Coriolis Matrix.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%             
q=[q1;q2;q3;q4];
for i=1:4
    for j=1:4
        for k=1:4
c(i,j,k)=((diff(M_q(k,j),q(i)))+(diff(M_q(k,i),q(j)))...
        -(diff(M_q(i,j),q(k))))/2;
        end
    end
end
for k=1:4
    for j=1:4
C_qqdot(k,j)=c(1,j,k)*q1dot+c(2,j,k)*q2dot+c(3,j,k)*q3dot+c(4,j,k)*q4dot;
    end
end
C_qqdot=simplify(C_qqdot);
for i=1:4
    for j=1:4
M_DOT(i,j)=diff(M_q(i,j),q1)*q1dot+diff(M_q(i,j),q2)*...
           q2dot+diff(M_q(i,j),q3)*q3dot+diff(M_q(i,j),q4)*q4dot;
    end
end
N_qqdot=simplify(M_DOT-2*C_qqdot);
isequal(N_qqdot,-N_qqdot.');                % It is skew-symmetric!

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Gravity Matrix.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
g_v=[0;0;-9.81];
P_1=-Link_1_mass*g_v.'*CM_1(1:3,4);
P_2=-Link_2_mass*g_v.'*CM_2(1:3,4);
P_3=-Link_3_mass*g_v.'*CM_3(1:3,4);
P_4=-Link_4_mass*g_v.'*CM_4(1:3,4);
P_Total=P_1+P_2+P_3+P_4;
g_q(1)=simplify(diff(P_Total,q1));
g_q(2,1)=simplify(diff(P_Total,q2));
g_q(3,1)=simplify(diff(P_Total,q3));  
g_q(4,1)=simplify(diff(P_Total,q4));  
g_q=simplify(g_q);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Reducing length.
M=vpa(M_q,4);C=vpa(C_qqdot,4);g=vpa(g_q,4);%save('M_C_g.mat','M','C','g');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Dynamic Equation for initial values of q=[0 0 0].
%DE=vpa(simplify(M_q*qddot+C_qqdot*qdot+g_q),2); %save('DE.mat','DE');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%                          Function FK                            %%%%%     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Inputs:
%%%%%           a: Translation x-axis.
%%%%%           d: Translation z-axis.
%%%%%           theta: Rotation z-axis.
%%%%% Output:
%%%%%           A: The homogeneous Matrix.
%%%%% Note: If Function FK_P, Alpha is pi/2.
%%%%%       If Function FK_M, Alpha is -pi/2. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function A=FK_P(a,d,theta)
A=[cos(theta) -sin(theta) 0 0;sin(theta) cos(theta) 0 0;0 0 1 0;0 0 0 1]*...
    [1 0 0 0; 0 1 0 0; 0 0 1 d; 0 0 0 1]*...
    [1 0 0 a; 0 1 0 0; 0 0 1 0; 0 0 0 1]*...
    [1 0 0 0; 0 0 -1 0;0 1 0 0;0 0 0 1];
end

function A=FK_M(a,d,theta)
A=[cos(theta) -sin(theta) 0 0;sin(theta) cos(theta) 0 0;0 0 1 0;0 0 0 1]*...
    [1 0 0 0; 0 1 0 0; 0 0 1 d; 0 0 0 1]*...
    [1 0 0 a; 0 1 0 0; 0 0 1 0; 0 0 0 1]*...
    [1 0 0 0; 0 0 1 0;0 -1 0 0;0 0 0 1];
end